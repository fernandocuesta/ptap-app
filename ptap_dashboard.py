
import streamlit as st
import pandas as pd
import os
from datetime import datetime
from pytz import timezone
import plotly.express as px
from fpdf import FPDF
from PIL import Image

st.set_page_config(page_title="Control Log√≠stico PTAP", page_icon="üöõ", layout="wide")

DATA_FILE = "ptap_data.csv"
FOTOS_DIR = "fotos"
os.makedirs(FOTOS_DIR, exist_ok=True)

def cargar_datos():
    try:
        return pd.read_csv(DATA_FILE)
    except FileNotFoundError:
        return pd.DataFrame(columns=["Fecha", "Hora", "T√©cnico", "Locaci√≥n", "pH", "Turbidez (NTU)",
                                     "Cloro Residual (mg/L)", "Observaciones", "Foto"])

def guardar_datos(df):
    df.to_csv(DATA_FILE, index=False)

if "data" not in st.session_state:
    st.session_state.data = cargar_datos()

tecnicos = ["Fernando Cuesta", "Felix Cuadros"]
locaciones = [
    "L95-AC-SUR-COM2",
    "L95-AC-SUR-PTAP",
    "L95-AC-SUR-GC",
    "L95-AC-SUR-HSE-01",
    "L95-AC-SUR-HSE-02",
    "L95-AC-SUR-PROD"
]

st.sidebar.header("üìÇ Navegaci√≥n")
menu = st.sidebar.radio("Ir a:", ["‚ûï Ingreso de muestra", "üìä KPIs y An√°lisis", "üìÑ Historial", "üì§ Exportar PDF"])

if menu == "‚ûï Ingreso de muestra":
    st.title("‚ûï Registro de nueva muestra")
    col1, col2 = st.columns(2)
    lima = timezone("America/Lima")
    now = datetime.now(lima)
    with col1:
        fecha = st.date_input("üìÖ Fecha", value=now.date(), max_value=now.date())
        hora = now.time().replace(microsecond=0)
        st.text(f"üïí Hora actual: {hora}")
        tecnico = st.selectbox("üë∑ T√©cnico", tecnicos)
        locacion = st.selectbox("üìç Locaci√≥n de muestreo", locaciones)
    with col2:
        ph = st.number_input("pH", min_value=0.0, max_value=14.0, step=0.1)
        turbidez = st.number_input("Turbidez (NTU)", min_value=0.0, step=0.1)
        cloro = st.number_input("Cloro Residual (mg/L)", min_value=0.0, step=0.1)
    observaciones = st.text_area("üìù Observaciones")
    foto = st.file_uploader("üì∑ Adjuntar foto (opcional)", type=["jpg", "jpeg", "png"])

    alerta = []
    if ph < 6.5 or ph > 8.5:
        alerta.append("‚ö†Ô∏è pH fuera de rango ideal (6.5 - 8.5)")
    if turbidez > 5:
        alerta.append("‚ö†Ô∏è Turbidez mayor a 5 NTU")
    if cloro < 0.2 or cloro > 1.5:
        alerta.append("‚ö†Ô∏è Cloro fuera del rango ideal (0.2 - 1.5 mg/L)")
    for msg in alerta:
        st.warning(msg)

    if st.button("Guardar muestra"):
        nombre_foto = ""
        if foto:
            nombre_foto = f"{fecha.strftime('%Y%m%d')}_{hora.strftime('%H%M%S')}_{locacion.replace(' ', '_')}_{foto.name}"
            with open(os.path.join(FOTOS_DIR, nombre_foto), "wb") as f:
                f.write(foto.read())

        nueva = {
            "Fecha": fecha.strftime("%Y-%m-%d"),
            "Hora": hora.strftime("%H:%M:%S"),
            "T√©cnico": tecnico,
            "Locaci√≥n": locacion,
            "pH": ph,
            "Turbidez (NTU)": turbidez,
            "Cloro Residual (mg/L)": cloro,
            "Observaciones": observaciones,
            "Foto": nombre_foto
        }
        df = st.session_state.data
        duplicado = df[(df["Fecha"] == nueva["Fecha"]) & (df["Hora"] == nueva["Hora"]) & (df["Locaci√≥n"] == nueva["Locaci√≥n"])]
        if not duplicado.empty:
            st.error("‚ùå Ya existe un registro con esta fecha, hora y locaci√≥n.")
        else:
            st.session_state.data = pd.concat([df, pd.DataFrame([nueva])], ignore_index=True)
            guardar_datos(st.session_state.data)
            st.success("‚úÖ Registro guardado correctamente.")
